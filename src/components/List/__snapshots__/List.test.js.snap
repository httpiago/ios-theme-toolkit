// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Test List component should render correctly based on last snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <List
    className="aditionalClass"
  >
    <Unknown
      className=""
    >
      Item 1
    </Unknown>
    <Unknown
      className=""
    >
      Item 2
    </Unknown>
    <Unknown
      className=""
    >
      Item 3
    </Unknown>
  </List>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <Unknown
          className=""
        >
          Item 1
        </Unknown>,
        <Unknown
          className=""
        >
          Item 2
        </Unknown>,
        <Unknown
          className=""
        >
          Item 3
        </Unknown>,
      ],
      "className": "list  aditionalClass",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": "Item 1",
          "className": "",
        },
        "ref": null,
        "rendered": "Item 1",
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": "Item 2",
          "className": "",
        },
        "ref": null,
        "rendered": "Item 2",
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": "Item 3",
          "className": "",
        },
        "ref": null,
        "rendered": "Item 3",
        "type": [Function],
      },
    ],
    "type": "ul",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <Unknown
            className=""
          >
            Item 1
          </Unknown>,
          <Unknown
            className=""
          >
            Item 2
          </Unknown>,
          <Unknown
            className=""
          >
            Item 3
          </Unknown>,
        ],
        "className": "list  aditionalClass",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": "Item 1",
            "className": "",
          },
          "ref": null,
          "rendered": "Item 1",
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": "Item 2",
            "className": "",
          },
          "ref": null,
          "rendered": "Item 2",
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": "Item 3",
            "className": "",
          },
          "ref": null,
          "rendered": "Item 3",
          "type": [Function],
        },
      ],
      "type": "ul",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
