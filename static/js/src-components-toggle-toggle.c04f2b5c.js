(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{"./src/components/Toggle/Toggle.mdx":function(e,l,a){"use strict";a.r(l);var n=a("./node_modules/react/index.js"),t=a.n(n),o=a("./node_modules/@mdx-js/tag/dist/index.js"),r=a("./node_modules/docz/dist/index.m.js"),m=a("./src/index.js");a("./dist/styles.css");function c(e,l){if(null==e)return{};var a,n,t=function(e,l){if(null==e)return{};var a,n,t={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],l.indexOf(a)>=0||(t[a]=e[a]);return t}(e,l);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],l.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(t[a]=e[a])}return t}l.default=function(e){var l=e.components,a=c(e,["components"]);return t.a.createElement(o.MDXTag,{name:"wrapper",components:l},t.a.createElement(o.MDXTag,{name:"h1",components:l,props:{id:"toggle"}},"Toggle"),t.a.createElement(o.MDXTag,{name:"p",components:l},"To use this component, simply import it into any file and pass the ",t.a.createElement(o.MDXTag,{name:"a",components:l,parentName:"p",props:{href:"#/#props"}},"modifiers")," in the properties."),t.a.createElement(o.MDXTag,{name:"pre",components:l},t.a.createElement(o.MDXTag,{name:"code",components:l,parentName:"pre",props:{className:"language-jsx",metastring:""}},"import { Toggle } from 'ios-theme-toolkit'\n\nexport default () => (\n  <label>\n    <Toggle checked={true} /> Label text\n  </label>\n)\n")),t.a.createElement(o.MDXTag,{name:"h2",components:l,props:{id:"examples"}},"Examples"),t.a.createElement(r.Playground,{__codesandbox:"undefined",__position:0,__code:'<label>\n  <Toggle defaultChecked name="toggle-demo" value="wifi" /> Green (default)\n</label>\n<label>\n  <Toggle color="blue" name="toggle-demo" value="gps" defaultChecked={true} />{\' \'}\n  Blue\n</label>\n<label>\n  <Toggle\n    color="red"\n    name="toggle-demo"\n    value="bluetooth"\n    defaultChecked={true}\n    disabled\n  />{\' \'}\n  Red (Disabled)\n</label>\n<label>\n  <Toggle\n    color="yellow"\n    name="toggle-demo"\n    value="sync"\n    defaultChecked={false}\n  />{\' \'}\n  Yellow\n</label>\n<label>\n  <Toggle\n    color="gray"\n    name="toggle-demo"\n    value="battery"\n    defaultChecked={true}\n  />{\' \'}\n  Gray\n</label>\n<label>\n  <Toggle size="small" name="toggle-demo" value="small" defaultChecked />{\' \'}\n  Small toggle\n</label>\n<label>\n  <Toggle size="big" name="toggle-demo" value="small" defaultChecked /> Big\n  toggle\n</label>\n<style>\n  {\n    \'.react-live-preview label { display: block; padding: 6px 0; } .react-live-preview .toggle__icon { margin-right: 6px !important; }\'\n  }\n</style>',__scope:{props:a,Toggle:m.p}},t.a.createElement("label",null,t.a.createElement(m.p,{defaultChecked:!0,name:"toggle-demo",value:"wifi"})," Green (default)"),t.a.createElement("label",null,t.a.createElement(m.p,{color:"blue",name:"toggle-demo",value:"gps",defaultChecked:!0})," Blue"),t.a.createElement("label",null,t.a.createElement(m.p,{color:"red",name:"toggle-demo",value:"bluetooth",defaultChecked:!0,disabled:!0})," Red (Disabled)"),t.a.createElement("label",null,t.a.createElement(m.p,{color:"yellow",name:"toggle-demo",value:"sync",defaultChecked:!1})," Yellow"),t.a.createElement("label",null,t.a.createElement(m.p,{color:"gray",name:"toggle-demo",value:"battery",defaultChecked:!0})," Gray"),t.a.createElement("label",null,t.a.createElement(m.p,{size:"small",name:"toggle-demo",value:"small",defaultChecked:!0})," Small toggle"),t.a.createElement("label",null,t.a.createElement(m.p,{size:"big",name:"toggle-demo",value:"small",defaultChecked:!0})," Big toggle"),t.a.createElement("style",null,".react-live-preview label { display: block; padding: 6px 0; } .react-live-preview .toggle__icon { margin-right: 6px !important; }")),t.a.createElement(o.MDXTag,{name:"h2",components:l,props:{id:"props"}},"Props"),t.a.createElement(r.PropsTable,{of:m.p}),t.a.createElement(o.MDXTag,{name:"p",components:l},'All the properties which are not listed above will be transferred to the <input type="checkbox"',">"," tag, so, It accepts all props which native checkbox support."))}}}]);